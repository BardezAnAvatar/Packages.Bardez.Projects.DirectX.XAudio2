How to apply the computed values of an X3DAudio computation


1) Use IXAudio2Voice::SetOutputMatrix and IXAudio2SourceVoice::SetFrequencyRatio to apply the volume and pitch values to the source voice. 
	X3DAUDIO_CALCULATE_DOPPLER:
pSFXSourceVoice->SetOutputMatrix( pMasterVoice, 1, deviceDetails.OutputFormat.Format.nChannels, DSPSettings.pMatrixCoefficients ) ;
pSFXSourceVoice->SetFrequencyRatio(DSPSettings.DopplerFactor);
	-or-
voice->SetFrequencyRatio( g_audioState.dspSettings.DopplerFactor );
voice->SetOutputMatrix( g_audioState.pMasteringVoice, INPUTCHANNELS, g_audioState.nChannels, g_audioState.matrixCoefficients );


2) Use IXAudio2Voice::SetOutputMatrix to apply the calculated reverb level to the submix voice.
	X3DAUDIO_CALCULATE_REVERB:
//sets the in and out channels to mono and uses the single reverb as the matrix.
pSFXSourceVoice->SetOutputMatrix(pSubmixVoice, 1, 1, &DSPSettings.ReverbLevel);
	-or-
voice->SetOutputMatrix(g_audioState.pSubmixVoice, 1, 1, &g_audioState.dspSettings.ReverbLevel);


3) Use IXAudio2Voice::SetFilterParameters to apply the calculated low pass filter direct coefficient to the source voice. 
	X3DAUDIO_CALCULATE_LPF_REVERB:
XAUDIO2_FILTER_PARAMETERS FilterParameters = { LowPassFilter, 2.0f * sinf(X3DAUDIO_PI/6.0f * DSPSettings.LPFDirectCoefficient), 1.0f };
pSFXSourceVoice->SetFilterParameters(&FilterParameters);


4) X3DAUDIO_CALCULATE_LPF_DIRECT:
XAUDIO2_FILTER_PARAMETERS FilterParametersDirect = { LowPassFilter, 2.0f * sinf(X3DAUDIO_PI/6.0f * g_audioState.dspSettings.LPFDirectCoefficient), 1.0f }; // see XAudio2CutoffFrequencyToRadians() in XAudio2.h for more information on the formula used here
voice->SetOutputFilterParameters(g_audioState.pMasteringVoice, &FilterParametersDirect);


5) X3DAUDIO_CALCULATE_LPF_REVERB:
XAUDIO2_FILTER_PARAMETERS FilterParametersReverb = { LowPassFilter, 2.0f * sinf(X3DAUDIO_PI/6.0f * g_audioState.dspSettings.LPFReverbCoefficient), 1.0f }; // see XAudio2CutoffFrequencyToRadians() in XAudio2.h for more information on the formula used here
voice->SetOutputFilterParameters(g_audioState.pSubmixVoice, &FilterParametersReverb);




How does one use:
pDelayTimes (is there a submix for this?)
EmitterToListenerAngle
EmitterToListenerDistance
EmitterVelocityComponent
ListenerVelocityComponent


Note:
XAudio2 Built-in Effects:
Effect			Creation Method
------------	------------------------
Reverb			XAudio2CreateReverb
Volume Meter	XAudio2CreateVolumeMeter


Further note:
"You can apply volume and pitch values calculated by X3DAudio to a voice with the IXAudio2Voice::SetOutputMatrix and IXAudio2SourceVoice::SetFrequencyRatio methods."
"Other values calculated by X3DAudio will need to be applied to a reverb effect using the IXAudio2Voice::SetEffectParameters method."




/*
*	Additional notes
*/
You can set the environmental settings based off of XAudio2fx.h This requires setting a Submix Voice intermediate, I believe. See XAudio2Sound3D sample project.



/*
*	Occlusion and Obstruction definitions:
*
one resource to buy:
buy: http://www.valorebooks.com/textbooks/game-audio-programming-1st-edition/9781584502456?utm_medium=referral&utm_campaign=Froogle&utm_source=Froogle

http://flylib.com/books/en/3.375.1.40/1/
"Obstruction Property

"The Obstruction property is in the range of -10,000 (-100 dB, indicating that no direct sound gets through) to 0 (0 dB, indicating that all direct sound gets through). The lower this value is below zero, the greater the muffling effect of the obstruction.

"Remember that an obstructed sound source is one where the direct path to the listener is blocked, but where there is a clear airway to the listener, so that early and late reflections and reverberations are not affected by the obstruction (see Figure 7.1).

"Obstruction LF Ratio Property

"The Obstruction LF Ratio property is a ratio that sets how low-frequency sound is attenuated relative to high-frequency sound. If the value is 0.0, there is no attenuation for low-frequency sound (it all gets through). If the value is 1.0 (the maximum), it is attenuated at the same rate as high-frequency sound.

"Occlusion Property

"The values and ranges for the Occlusion and Occlusion LF Ratio properties have a very similar effect as those for obstruction. A value of -10,000 (-100 dB) for Occlusion indicates full occlusion (no sound gets through), and any value above this indicates that some source sound gets through.

"Remember that occlusion occurs when there is no direct airway from the sound source to the listener. An example of occlusion occurs when you are in a room with the doors and windows closed, but can still hear noises from outside (see Figure 7.1).

"Occlusion LF Ratio Property

"The Occlusion LF Ratio property determines the ratio of how the occlusion muffling of low-frequency sound compares to high-frequency sound. A fully occluded listener (indicated by an occlusion setting of -10,000) will still be able to hear plenty of low-frequency sound if Occlusion LF Ratio is set between 0.0 and 0.5 (0.25 is the default).

"Occlusion Room Ratio Property

"The Occlusion Room Ratio property applies only to early reflections and late reverberations; it does not apply to the source sound. It applies an additional attenuation factor for these sounds. The value ranges from 0.0 (indicating no additional attenuation) up to 10 (indicating ten times the attenuation). The default value is 0.5.

"The characteristics of an occlusion depend on the type of material creating the occlusion; in other words, the material that stands between the sound source and the listener (for example, a metal door, a glass window, a stone wall, or a wooden floor). The  eax.h header file includes some presets to give you an idea of the occlusion properties of different materials."




/********************************
*	Take-aways from research	*
********************************/
1) Sound has three major points that you observe:
	a) Direct path
	b) First order reflection from other surfaces (early)
	c) Second order reflections from other surfaces (late)
2) The presets for reverberation are the Reverb filter, and the presets are the EAX-equivlents, as defined in the I3DL2 spec.
3) There are four types of audio reaching the target listener: Direct, Obstruction, Occlusion and Exclusion. These are calculated via DSP (Digital sound processing) Settings
	a) Direct is when a direct path can be ray-traced from the source to the target listener
		i) The preferred example is when there is a source emitter and target listener in one wise-open room with no other objects in between the two
	b) Obstruction is when a direct path of audio cannot be so ray-traced, but the reflections are able to get straight through via ray tracing.
		i) The preferred example is a column in front of the target, between the emitter and listener
	c) Occlusion is when neither a direct path nor a reflected path can be found to the target.
		i) The preferred example is a wall between the source and target
	d) Exclusion is when only a direct path is present from the source to the listener, but reflections are not able to be observed
		i) The preferred example is a wall between the source and target, with a hole directly between the source and target
			allowing just the direct path but preventing the reflections
4)	The Occlusion and Obstruction and Exclusion effects are just low-pass filters (see I3DL2, page 8, Paragraph 2, sentence 2).


How to apply the Obstruction and Exclusion effects:
	Do not know. Using low-pass filters, I think, but not sure how yet.
	To audibly invalidate a filter (not programatically), set it to Type low pass, freq to 1.0F, 1/Q of 1.0F
	To use a filter, it must be declared when creating the voice (i.e.: "CreateSourceVoice( &g_source, sfx.wf(), XAUDIO2_VOICE_USEFILTER );" )

3) In the X3DAudio API calculations are performed to represent the emitter, listener and the attenuation of the audio signal.
4) Doppler effect's frequency ratio (pitch), output matrix goes to source vource
6) Direct coefficient goes on the source voice via filter parameters
5) Reverb coefficient goes to a submix voice via output matrix


/****************
*	2013-05-06	*
****************/
Notes on low-pass filters.
Low-pass gives the effect of muffling, as I already know. However, the XAudio2 implementation has been frustratingly confusing.
From this source (http://www.win32developer.com/tutorial/xaudio/xaudio_tutorial_7.shtm),
the parameters appear to be as follows:
*	The Frequency is the radian frequency, which must be between 0.0 and 1.0.
		In this case, I would give a frequency, and a header function could give me the resultant radian frequency
*	And the attenuation factor (also known as "Q") is stored as its reciprocal in the structure as OneOverQ.
		This would be my point of most confusion. I get the inversion of it. But until now, I do not think
		that I 'got' that the Q was the Attenuation factor, which would seem to be the meat.
		I can find from Wikipedia (http://en.wikipedia.org/wiki/Attenuation_coefficient) a Attenuation coefficient,
		which seems to suggest the two are the same/related.
		Further, this (http://www.wisegeek.com/what-is-the-attenuation-coefficient.htm) explains that the coefficient
		is a factor of how the sound it attenuated due to the thickness of the material.

The presets in I3DL2 are an attenuation and a control ratio:
	Attenuation at high frequencies
	Low frequency in regard to high frequency (which is set in the Reverb params, I believe)
		obstruction is 0.0 ratio, which means, I think, that the filter is set AT the specified high frequency
		Occlusion is 0.25 ratio, which means, I think, that the filter is set at 75% of the specified high frequency

What this says, to me, is that the I3DL2 presets have the attenuation coefficient and the frequency defined, and I
need to combine this with an environment-specified thickness, which yields the values for a low pass filter.

Reverb:
To get it to sound correct, you need to play the reverb AS WELL AS the direct path, not just the reverb. Oops on me


/****************
*	2013-05-07	*
****************/
Looking at the XAudio2Sound3D project again, it suddenly makes sense on how to apply 3D effects.
The default assumption is that there will be a reverb effect in place.
Now that I know that you need to have the direct path play as well as the reverb effect path play, reading that
code again, I see that there is a set of filter application for each path:
	1) Set the frequency ratio on the source voice
	2) Direct Path
		a) Set the output matrix of in & out channels with the matrix coefficients
		b) Set the reverb's low-pass filter with the direct coefficient
	3) Reverb path
		a) set the output matrix of mono with the ReverbLevel matrix (single value)
		b) set the reverb's low-pass filter with the reverb coefficient

See Audio.cpp, lines 384-400 in that project for the explanation. I get it now!

Also, to disable an output matrix, low pass filter and frequency ratio:
	Low-pass filter:
		Both values to 1.0f
	Frequency ratio:
		Set ratio to 1.0f
	Output matrix:
		Set all values to 1.0f to match the source channel mapping.